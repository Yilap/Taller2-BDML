# Loading Libraries -------------------------------------------------------
rm(list = ls())
#install.packages("pacman")
require("pacman")
p_load("tidyverse","rvest","rio","skimr","caret","ggplot2","stargazer","readr")
# Se importan los 4 archivos a usar
test_hogares <- read_csv("Downloads/uniandes-bdml-20231-ps2/test_hogares.csv")
install.packages("httr")
install.packages("httr")
p_load("httr","tidyverse","rvest","rio","skimr","caret","ggplot2","stargazer","readr")
library(httr)
require("pacman")
p_load("httr","tidyverse","rvest","rio","skimr","caret","ggplot2","stargazer","readr")
APIKaggle <- GET("https://www.kaggle.com/competitions/uniandes-bdml-20231-ps2/data?select=train_personas.csv")
View(APIKaggle)
install.packages("kaggle")
p_load("kaggle","httr","tidyverse","rvest","rio","skimr","caret","ggplot2","stargazer","readr")
install.packages("kaggle")
devtools::install_packages("mkearney/kaggler")
install_packages("mkearney/kaggler")
install.packages("mkearney/kaggler")
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler"
devtools::install_github("ldurazo/kaggler")
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
devtools::install_github("ldurazo/kaggler")
kgl_auth(creds_file = 'kaggle.json')
response <- kgl_datasets_download_all(owner_dataset = "https://www.kaggle.com/competitions/uniandes-bdml-20231-ps2/data")
response <- kgl_datasets_download_all(owner_dataset = "kaggle competitions download -c uniandes-bdml-20231-ps2")
View(APIKaggle)
library(httr)
library(jsonlite)
install.packages(c("httr", "jsonlite","dplyr"))
library(httr)
library(jsonlite)
library("dplyr")
install.packages(c("httr", "jsonlite", "dplyr"))
res <- GET("https://www.kaggle.com/competitions/uniandes-bdml-20231-ps2/data")
rm(list = ls())
install.packages("kaggle")
library(kaggle)
p_load("jsonlite","kaggler","readr","httr","tidyverse","rvest","rio","skimr","caret","ggplot2","stargazer","readr")
library(httr)
require("pacman")
p_load("jsonlite","kaggler","readr","httr","tidyverse","rvest","rio","skimr","caret","ggplot2","stargazer","readr")
auth_url <- "https://www.kaggle.com/account/login"
response <- POST(
auth_url,
body = list(
username = "yilap88",
password = "61bd79a3ce7dffb7f76b341e39e90077",
rememberme = "true"
),
encode = "form"
)
token <- content(response)$xsrf_token
token <- content(response)$xsrf_token
auth_url <- "https://www.kaggle.com/account/login"
response <- POST(
auth_url,
body = list(
username = "yilap88",
password = "61bd79a3ce7dffb7f76b341e39e90077",
rememberme = "false"
),
encode = "form"
)
token <- content(response)$xsrf_token
kgl_credentials <- function(kgl_json_path="~/.kaggle/kaggle.json"){
# returns user credentials from kaggle json
user <- fromJSON("~/.kaggle/kaggle.json", flatten = TRUE)
return(user)
}
View(kgl_credentials)
rm(list = ls())
kgl_credentials <- function(kgl_json_path="~/.kaggle/kaggle.json"){
# returns user credentials from kaggle json
user <- fromJSON("~/.kaggle/kaggle.json", flatten = TRUE)
return(user)
}
View(kgl_credentials)
kgl_credentials <- function(kgl_json_path="~/.kaggle/kaggle.json"){
# returns user credentials from kaggle json
user <- fromJSON("~/.kaggle.json", flatten = TRUE)
return(user)
}
View(kgl_credentials)
kgl_credentials <- function(kgl_json_path="~/.kaggle.json"){
# returns user credentials from kaggle json
user <- fromJSON("~/.kaggle.json", flatten = TRUE)
return(user)
}
View(kgl_credentials)
kgl_dataset <- function(ref, file_name, type="dataset", kgl_json_path="~/.kaggle/kaggle.json"){
# ref: depends on 'type':
# - dataset: "sudalairajkumar/novel-corona-virus-2019-dataset"
# - competition: competition ID, e.g. 8587 for "competitive-data-science-predict-future-sales"
# file_name: specific dataset wanted, e.g. "covid_19_data.csv"
.kaggle_base_url <- "https://www.kaggle.com/api/v1"
user <- kgl_credentials(kgl_json_path)
if(type=="dataset"){
# dataset
url <- paste0(.kaggle_base_url, "/datasets/download/", ref, "/", file_name)
}else if(type=="competition"){
# competition
url <- paste0(.kaggle_base_url, "/competitions/data/download/", ref, "/", file_name)
}
# call
rcall <- httr::GET(url, httr::authenticate(user$username, user$key, type="basic"))
# content type
content_type <- rcall[[3]]$`content-type`
if( grepl("zip", content_type)){
# download and unzup
temp <- tempfile()
download.file(rcall$url,temp)
data <- read.csv(unz(temp, file_name))
unlink(temp)
}else{
# else read as text -- note: code this better
data <- content(rcall, type="text/csv", encoding = "ISO-8859-1")
}
return(data)
}
rm(list = ls())
kgl_credentials <- function(kgl_json_path="~/.kaggle/kaggle.json"){
# returns user credentials from kaggle json
user <- fromJSON("~/.kaggle/kaggle.json", flatten = TRUE)
return(user)
}
kgl_dataset <- function(ref, file_name, type="dataset", kgl_json_path="~/.kaggle/kaggle.json"){
# ref: depends on 'type':
# - dataset: "sudalairajkumar/novel-corona-virus-2019-dataset"
# - competition: competition ID, e.g. 8587 for "competitive-data-science-predict-future-sales"
# file_name: specific dataset wanted, e.g. "covid_19_data.csv"
.kaggle_base_url <- "https://www.kaggle.com/api/v1"
user <- kgl_credentials(kgl_json_path)
if(type=="dataset"){
# dataset
url <- paste0(.kaggle_base_url, "/datasets/download/", ref, "/", file_name)
}else if(type=="competition"){
# competition
url <- paste0(.kaggle_base_url, "/competitions/data/download/", ref, "/", file_name)
}
# call
rcall <- httr::GET(url, httr::authenticate(user$username, user$key, type="basic"))
# content type
content_type <- rcall[[3]]$`content-type`
if( grepl("zip", content_type)){
# download and unzup
temp <- tempfile()
download.file(rcall$url,temp)
data <- read.csv(unz(temp, file_name))
unlink(temp)
}else{
# else read as text -- note: code this better
data <- content(rcall, type="text/csv", encoding = "ISO-8859-1")
}
return(data)
}
kgl_credentials <- function(kgl_json_path="~/.kaggle/kaggle.json"){
# returns user credentials from kaggle json
user <- fromJSON("~/.kaggle/kaggle.json", flatten = TRUE)
return(user)
}
usuario <- kgl_credentials("C:\Users\Yilmer Palacios\Desktop\Repositorios GitHub\Taller-2---BD-ML\Scripts")
usuario <- kgl_credentials(C:\Users\Yilmer Palacios\Desktop\Repositorios GitHub\Taller-2---BD-ML\Scripts)
dir <- "C:\Users\Yilmer Palacios\Desktop\Repositorios GitHub\Taller-2---BD-ML\Scripts"
dir <- C:\Users\Yilmer Palacios\Desktop\Repositorios GitHub\Taller-2---BD-ML\Scripts
rm(list = ls())
rm(list = ls())
#install.packages("pacman")
#install.packages("httr")
require("pacman")
p_load("httr","tidyverse","rvest","rio","skimr","caret","ggplot2","stargazer","readr")
#Compu Yilmer
test_hogares <- read_csv("C:\Users\Yilmer Palacios\Desktop\BaseDatosT2/test_hogares.csv")
#Compu Yilmer
test_hogares <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/test_hogares.csv")
train_hogares <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/train_hogares.csv")
test_personas <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/test_personas.csv")
train_personas <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/train_personas.csv")
train_personas <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/sample_submission.csv")
train_personas <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/sample_submission.csv")
View(test_hogares)
View(test_personas)
user <- kgl_credentials("")
user <- kgl_credentials("C:/Users/Yilmer Palacios/Desktop/Repositorios GitHub/Taller-2---BD-ML/Scripts")
user <- kgl_credentials(C:/Users/Yilmer Palacios/Desktop/Repositorios GitHub/Taller-2---BD-ML/Scripts)
user <- kgl_credentials()
kgl_credentials <- function(kgl_json_path="~/.kaggle/kaggle.json"){
# returns user credentials from kaggle json
user <- fromJSON("~/.kaggle/kaggle.json", flatten = TRUE)
return(user)
}
user <- kgl_credentials()
user <- kgl_credentials(C:\Users\Yilmer Palacios\Desktop\Repositorios GitHub\Taller-2---BD-ML\Scripts)
user <- kgl_credentials("C:\Users\Yilmer Palacios\Desktop\Repositorios GitHub\Taller-2---BD-ML\Scripts")
user <- kgl_credentials("C:/Users/Yilmer Palacios/Desktop/Repositorios GitHub/Taller-2---BD-ML/Scripts")
kgl_dataset <- function(ref, file_name, type="dataset", kgl_json_path="~/.kaggle/kaggle.json"){
# ref: depends on 'type':
# - dataset: "sudalairajkumar/novel-corona-virus-2019-dataset"
# - competition: competition ID, e.g. 8587 for "competitive-data-science-predict-future-sales"
# file_name: specific dataset wanted, e.g. "covid_19_data.csv"
.kaggle_base_url <- "https://www.kaggle.com/api/v1"
user <- kgl_credentials(kgl_json_path)
if(type=="dataset"){
# dataset
url <- paste0(.kaggle_base_url, "/datasets/download/", ref, "/", file_name)
}else if(type=="competition"){
# competition
url <- paste0(.kaggle_base_url, "/competitions/data/download/", ref, "/", file_name)
}
# call
rcall <- httr::GET(url, httr::authenticate(user$username, user$key, type="basic"))
# content type
content_type <- rcall[[3]]$`content-type`
if( grepl("zip", content_type)){
# download and unzup
temp <- tempfile()
download.file(rcall$url,temp)
data <- read.csv(unz(temp, file_name))
unlink(temp)
}else{
# else read as text -- note: code this better
data <- content(rcall, type="text/csv", encoding = "ISO-8859-1")
}
return(data)
}
kgl_dataset()
rm(list = ls())
#install.packages("pacman")
#install.packages("httr")
require("pacman")
p_load("httr","tidyverse","rvest","rio","skimr","caret","ggplot2","stargazer","readr")
# Importing Dataset -------------------------------------------------------
# Se importan los 4 archivos a usar
#test_hogares <- read_csv("Downloads/uniandes-bdml-20231-ps2/test_hogares.csv")
#train_hogares <- read_csv("Downloads/uniandes-bdml-20231-ps2/train_hogares.csv")
#test_personas <- read_csv("Downloads/uniandes-bdml-20231-ps2/test_personas.csv")
#train_personas <- read_csv("Downloads/uniandes-bdml-20231-ps2/train_personas.csv")
#Compu Yilmer
test_hogares <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/test_hogares.csv")
train_hogares <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/train_hogares.csv")
test_personas <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/test_personas.csv")
train_personas <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/train_personas.csv")
train_personas <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/sample_submission.csv")
train_personas <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/train_personas.csv")
sample_sub <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/sample_submission.csv")
saveRDS(GEIH, file = "GEIH1.rds")
View(sample_sub)
View(test_hogares)
View(test_personas)
merged_train <- merge(train_hogares, train_personas, by = "id")
View(merged_train)
m_test <- merge(test_hogares, test_personas, by = "id")
rm(test_hogares, test_personas,train_hogares, train_personas)
Loading Libraries -------------------------------------------------------
p_load("kknn","dplyr","httr","tidyverse","rvest","rio","skimr","caret","ggplot2","stargazer","readr","AER","MLmetrics","smotefamily")
test_hogares <- read_csv("Downloads/uniandes-bdml-20231-ps2/test_hogares.csv")
train_hogares <- read_csv("Downloads/uniandes-bdml-20231-ps2/train_hogares.csv")
test_personas <- read_csv("Downloads/uniandes-bdml-20231-ps2/test_personas.csv")
train_personas <- read_csv("Downloads/uniandes-bdml-20231-ps2/train_personas.csv")
sample_sub <- read_csv("C:/Users/Yilmer Palacios/Desktop/BaseDatosT2/sample_submission.csv")
library(stargazer)
library(tidyverse)
library(rvest)
test_hogares <- read_csv("C:\Users\Jimena\Documents\MAESTRIA\BIG DATA\REPOSITORIOS BIG DATA\REPOSITORIOS\bsses\test_hogares.csv")
train_personas <- read_csv("C:\Users\Jimena\Documents\MAESTRIA\BIG DATA\REPOSITORIOS BIG DATA\REPOSITORIOS\bsses\train_personas.csv")
detach("package:readr", unload = TRUE)
library(readr)
View(sample_sub)
View(merged_train)
View(m_test)
summary(df)
saveRDS(GEIH, file = "GEIH1.rds")
GEIH<-readRDS("GEIH1.Rds")
m_test <- merge(test_hogares, test_personas, by = "id")
m_train <- merge(train_hogares, train_personas, by = "id")
rm(test_hogares, test_personas,train_hogares, train_personas)
length(unique(m_test$id))
length(unique(m_train$id))
totaldata <- rbind(m_train, m_test)
_test$ViveEnCabecera <- ifelse(m_test$Clase.x == 1, 1,
m_test$ViveEnCabecera <- ifelse(m_test$Clase.x == 1, 1,
ifelse(m_test$Clase.x == 2, 0, 0
))
m_test <- m_test %>%
mutate(ViveEnCabecera = factor(m_test$ViveEnCabecera,
levels = c(0,1),
labels = c("No vive en Cabecera", "Vive en Cabecera")))
m_train$ViveEnCabecera <- ifelse(m_train$Clase.x == 1, 1,
ifelse(m_train$Clase.x == 2, 0, 0
))
m_test$JefeMujer <- ifelse(m_test$P6050 == 1 & m_test$P6020 == 2, 1, 0)
m_train$JefeMujer <- ifelse(m_train$P6050 == 1 & m_train$P6020 == 2, 1, 0)
m_test <- m_test %>%
mutate(JefeMujer = factor(m_test$JefeMujer,
levels = c(0,1),
labels = c("Jefe de hogar no es mujer", "Jefe de Hogar es Mujer")))
m_train <- m_train %>%
mutate(JefeMujer = factor(m_train$JefeMujer,
levels = c(0,1),
labels = c("Jefe de hogar no es mujer", "Jefe de Hogar es Mujer")))
m_test$PersonaPorCuarto <-  m_test$Nper / m_test$P5010
m_train$PersonaPorCuarto <-  m_train$Nper / m_train$P5010
m_test <- m_test %>%
mutate(P5090 = factor(m_test$P5090,
levels = c(1,2,3,4,5,6),
labels = c("Propia totalmente pagada", "Propia, la están pagando", "Arriendo o subarriendo", "Usufructo", "posesión sin título", "Otra")))
m_train <- m_train %>%
mutate(P5090 = factor(m_train$P5090,
levels = c(1,2,3,4,5,6),
labels = c("Propia totalmente pagada", "Propia, la están pagando", "Arriendo o subarriendo", "Usufructo", "posesión sin título", "Otra")))
m_test <- rename(m_test, TipoVivienda = P5090)
m_train <- rename(m_train, TipoVivienda = P5090)
m_test$P6100[m_test$P6090 == 2 | m_test$P6090 == 9] <- 0
m_train$P6100[m_train$P6090 == 2 | m_train$P6090 == 9] <- 0
m_test$RegimenSalud <- ifelse(m_test$P6100 == 1 | m_test$P6100 == 2 , 1, 0)
m_train$RegimenSalud <- ifelse(m_train$P6100 == 1 | m_train$P6100 == 2 , 1, 0)
m_test <- m_test %>%
mutate(RegimenSalud = factor(m_test$RegimenSalud,
levels = c(0,1),
labels = c("No Pertenece al régimen contributivo o especial", "Pertenece al régimen contributivo o especial")))
m_train <- m_train %>%
mutate(RegimenSalud = factor(m_train$RegimenSalud,
levels = c(0,1),
labels = c("No Pertenece al régimen contributivo o especial", "Pertenece al régimen contributivo o especial")))
m_test$P6210[is.na(m_test$P6210)] <- 0 # los NA en teoría corresponden a personas que no reportan grado, los ajustamos a cero.
m_train$P6210[is.na(m_train$P6210)] <- 0
m_train$Añoseduc <- ifelse(m_train$P6210 == 3, 5,
ifelse(m_train$P6210  == 4, 9,
ifelse(m_train$P6210  == 5, 11,
ifelse(m_train$P6210  == 6, 16,
ifelse(m_train$P6210  == 9, 0, 0)))))
m_test$Añoseduc <- ifelse(m_test$P6210 == 3, 5,
ifelse(m_test$P6210  == 4, 9,
ifelse(m_test$P6210  == 5, 11,
ifelse(m_test$P6210  == 6, 16,
ifelse(m_test$P6210  == 9, 0, 0)))))
missing_count <- colSums(is.na(m_train))
sum_añoseduc <- aggregate(m_train$Añoseduc[m_train$Pet == 1], by = list(m_train$id[m_train$Pet == 1]), sum)
colnames(sum_añoseduc) <- c("id", "total_añoseduc")
m_train <- merge(m_train, sum_añoseduc, by = "id")
sum_añoseduc2 <- aggregate(m_test$Añoseduc[m_test$Pet == 1], by = list(m_test$id[m_test$Pet == 1]), sum)
colnames(sum_añoseduc2) <- c("id", "total_añoseduc")
m_test <- merge(m_test, sum_añoseduc2, by = "id")
rm(sum_añoseduc, sum_añoseduc2)
m_test$Oc[is.na(m_test$Oc)] <- 0
m_train$Oc[is.na(m_train$Oc)] <- 0
m_test <- m_test %>%
group_by(id) %>%
mutate(Suma_Ocu = sum(Oc))
m_test$PorcentajeOcupados <-  m_test$Suma_Ocu / m_test$Nper
m_train <- m_train %>%
group_by(id) %>%
mutate(Suma_Ocu = sum(Oc))
m_test <- m_test %>%
group_by(id) %>%
mutate(suma_años = sum(Añoseduc))
m_test$EducaciónPromedio <-  m_test$suma_años / m_test$Nper
m_train <- m_train %>%
group_by(id) %>%
mutate(suma_años = sum(Añoseduc))
length(unique(m_test$id))
length(unique(m_train$id))
m_train <- rename(m_train, AntiguedadTrabajo = P6426)
m_train$AntiguedadTrabajo[m_train$Oc == 0] <- 0
m_train$P6430[m_train$Oc == 0] <- 0
m_test <- m_test %>%
mutate(P6430 = factor(P6430,
levels = c(0,1,2,3,4,5,6,7,8,9),
labels = c("No trabaja",
"Empleado Empresa Particular",
"Empleado del Gobierno",
"Empleado Doméstico",
"Cuenta Propia",
"Empleador",
"Trabajador Familiar sin Remuneración",
"Trabajador sin remuneración en empresas",
"Jornalero o Peón",
"Otro")))
m_train <- m_train %>%
mutate(P6430 = factor(P6430,
levels = c(0,1,2,3,4,5,6,7,8,9),
labels = c("No trabaja",
"Empleado Empresa Particular",
"Empleado del Gobierno",
"Empleado Doméstico",
"Cuenta Propia",
"Empleador",
"Trabajador Familiar sin Remuneración",
"Trabajador sin remuneración en empresas",
"Jornalero o Peón",
"Otro")))
m_train <- rename(m_train, JefeHogar = P6050)
train_final <-subset(m_train, select = c("PorcentajeOcupados","ViveEnCabecera","JefeMujer","PersonaPorCuarto","TipoVivienda","RegimenSalud","EducaciónPromedio","AntiguedadTrabajo","TipoDeTrabajo","Pobre","Lp","Ingtotugarr"))
missing_count <- colSums(is.na(train_final))
ggplot(train_hogares, aes(x = Pobre))+
geom_bar(fill = "darkblue")+
theme_bw()+
labs(x= "", y = "Frecuencia", title = "el hogar es pobre")
ggplot(train_hogares, aes(x = Pobre))+
geom_bar(fill = "darkblue")+
theme_bw()+
labs(x= "", y = "Frecuencia", title = "el hogar es pobre")
test_hogares <- read_csv("C:\Users\Jimena\Documents\MAESTRIA\BIG DATA\REPOSITORIOS BIG DATA\REPOSITORIOS\bsses\test_hogares.csv")
test_hogares <- read_csv("C:/Users/Jimena/Documents/MAESTRIA/BIG DATA/REPOSITORIOS BIG DATA/REPOSITORIOS/bsses/test_hogares.csv")
train_hogares <- read_csv("C:/Users/Jimena/Documents/MAESTRIA/BIG DATA/REPOSITORIOS BIG DATA/REPOSITORIOS/bsses/train_hogares.csv")
test_personas <- read_csv("C:/Users/Jimena/Documents/MAESTRIA/BIG DATA/REPOSITORIOS BIG DATA/REPOSITORIOS/bsses/test_personas.csv")
train_personas <- read_csv("C:/Users/Jimena/Documents/MAESTRIA/BIG DATA/REPOSITORIOS BIG DATA/REPOSITORIOS/bsses/train_personas.csv")
saveRDS(GEIH, file = "GEIH1.rds")
m_test <- merge(test_hogares, test_personas, by = "id")
m_train <- merge(train_hogares, train_personas, by = "id")
length(unique(m_test$id))
length(unique(m_train$id))
m_train$train <- rep(1, nrow(m_train))
ggplot(train_hogares, aes(x = Pobre))+
geom_bar(fill = "darkblue")+
theme_bw()+
labs(x= "", y = "Frecuencia", title = "el hogar es pobre")
_train <- rename(m_train, JefeHogar = P6050)
m
train_final <-subset(m_train, select = c("PorcentajeOcupados","ViveEnCabecera","JefeMujer","PersonaPorCuarto","TipoVivienda","RegimenSalud","EducaciónPromedio","AntiguedadTrabajo","TipoDeTrabajo","Pobre","Lp","Ingtotugarr"))
m_train <- rename(m_train, JefeHogar = P6050)
m_test <- rename(m_test, JefeHogar = P6050)
m_train <- m_train %>% filter(JefeHogar == 1)
m_test <- m_test %>% filter(JefeHogar == 1)
m_train$P6430[m_train$Oc == 0] <- 0
m_test$P6430[m_test$Oc == 0] <- 0
stat.desc(df)
descriptivas$Estadisticas <- row.names(descriptivas)
descriptivas <- descriptivas %>% select(Estadisticas, everything())
# se exporta a excel tabla con las estadísticas descriptivas
write_xlsx(descriptivas, "descriptivas.xlsx")
tbl_summary(df, statistic = list (all_continuous()~"{mean} ({sd})")) # generales
summary(df)
